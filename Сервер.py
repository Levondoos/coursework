import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd
import os
from openpyxl import Workbook
import socket
import threading
from datetime import datetime
import json

class DishFrame(ttk.Frame):
    def __init__(self, parent, dish_data, update_callback, delete_callback):
        super().__init__(parent)
        self.dish_data = dish_data
        self.update_callback = update_callback
        self.delete_callback = delete_callback

        self.style = ttk.Style()
        self.style.configure('Dish.TFrame', font=('Arial', 14), background='white', borderwidth=2)

        self.configure(padding=10, relief='raised', borderwidth=2,style='Dish.TFrame')
        self.grid_columnconfigure(1, weight=1)
    # –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ—Ä–µ–π–º–∞
        self.name_label = ttk.Label(self, text=dish_data['name'],
                                    font=('Arial', 14, 'bold'), wraplength=150,background='white')
        self.name_label.grid(row=0, column=0, sticky='w', pady=(0, 5))

        self.price_label = ttk.Label(self, text=f"{dish_data['price']} ‚ÇΩ", font=('Arial', 14),background='white')
        self.price_label.grid(row=0, column=1, sticky='e')

        self.ingredients_label = ttk.Label(self, text=f'–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{dish_data['ingredients']}',
                                           wraplength=200,background='white')
        self.ingredients_label.grid(row=1, column=0, columnspan=2, sticky='w')
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.button_frame = ttk.Frame(self,style='Dish.TFrame')
        self.button_frame.grid(row=2, column=0, columnspan=2, pady=(10, 0), sticky='e')

        self.status_label = ttk.Label(self.button_frame, text=f"{dish_data['status']}",
                                      anchor = 'w', font=('Arial', 12),background='white')
        self.status_label.pack(side="left")

        self.edit_btn = ttk.Button(self.button_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å",
                                   command=self.edit_dish)
        self.edit_btn.pack(side="right", padx=2)

        self.delete_btn = ttk.Button(self.button_frame, text="–£–¥–∞–ª–∏—Ç—å",
                                     command=self.confirm_delete)
        self.delete_btn.pack(side="right", padx=2)

    def edit_dish(self):
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_window = tk.Toplevel(self)
        edit_window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ")
        edit_window.geometry("400x320")

        ttk.Label(edit_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(pady=(10, 0), padx=10, anchor='w')
        name_entry = ttk.Entry(edit_window)
        name_entry.insert(0, self.dish_data['name'])
        name_entry.pack(fill='x', padx=10, pady=(0, 10))

        change_state = ttk.Label(edit_window)
        change_state.pack(pady=(10, 0), padx=10, anchor='w')
        ttk.Label(change_state, text="–°—Ç–∞—Ç—É—Å:").pack(side='left')
        states = ["–í —Å—Ç–æ–ø –ª–∏—Å—Ç–µ", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"]
        combobox = ttk.Combobox(change_state, textvariable=self.dish_data['status'], values=states, state="readonly")
        combobox.pack(side='left', padx=5)

        ttk.Label(edit_window, text="–¶–µ–Ω–∞ (‚ÇΩ):").pack(pady=(10, 0), padx=10, anchor='w')
        price_entry = ttk.Entry(edit_window)
        price_entry.insert(0, str(self.dish_data['price']))
        price_entry.pack(fill='x', padx=10, pady=(0, 10))

        ttk.Label(edit_window, text="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:").pack(pady=(10, 0), padx=10, anchor='w')
        ingredients_text = tk.Text(edit_window, height=5)
        ingredients_text.insert('1.0', self.dish_data['ingredients'])
        ingredients_text.pack(fill='x', padx=10, pady=(0, 10))

        def save_changes():
            new_name = name_entry.get().strip()
            new_price = price_entry.get().strip()
            new_ingredients = ingredients_text.get('1.0', 'end-1c').strip()
            new_status=combobox.get().strip()

            if not new_name or not new_price or not new_ingredients or not new_status:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                return

            try:
                new_price = float(new_price)
            except ValueError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            if new_price < 0:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
                return
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.dish_data['name'] = new_name
            self.dish_data['price'] = new_price
            self.dish_data['ingredients'] = new_ingredients
            self.dish_data['status'] = new_status
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.name_label.config(text=new_name)
            self.price_label.config(text=f"{new_price} ‚ÇΩ")
            self.ingredients_label.config(text=new_ingredients)
            self.status_label.config(text=new_status)
    # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.update_callback()
            edit_window.destroy()

        ttk.Button(edit_window, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_changes).pack(pady=10)

    def confirm_delete(self):
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                               f"–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ '{self.dish_data['name']}'?"):
            self.delete_callback(self.dish_data['id'])
            self.destroy()

class Server:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–µ—Ä–≤–µ—Ä")
        self.root.geometry("1000x700")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.host = '0.0.0.0'
        self.port = 5050
        self.k_host = ''
        self.k_port = 5051
        self.server_socket = None
        self.client_socket = None
        self.listening = False
    # –§–∞–π–ª –¥–ª—è –º–µ–Ω—é
        self.current_file =  None
    # –§–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        self.current_history_file = None
    # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.configure('Nav.TButton', font=('Arial', 10), padding=10, relief='raised')
        self.style.configure('Connection.TFrame', background='#f0f0f0')
    # –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é
        self.dishes  = []
        self.next_id  = 1
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        if self.current_file is not None: self.load_men_data()
        self.show_section("beg")

    def create_widgets(self):
    # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ttk.Frame(self.root)
        self.main_container.pack(fill='both', expand=True)
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_frame = ttk.Frame(self.main_container, width=200, style='Nav.TFrame', relief='raised')
        self.nav_frame.pack(side='left', fill='y')
        self.nav_frame.pack_propagate(False)
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        ttk.Label(self.nav_frame, text="Menu and orders\nmanager system",
                  font=('Arial', 12, 'bold')).pack(pady=(20, 10))

        self.menu_btn = ttk.Button(
            self.nav_frame, text="üçΩÔ∏è –ú–µ–Ω—é", style='Nav.TButton',
            command=self.show_menu_section)
        self.menu_btn.pack(fill='x', pady=5, padx=5)

        self.connection_btn = ttk.Button(
            self.nav_frame, text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", style='Nav.TButton',
            command=self.show_connection_section)
        self.connection_btn.pack(fill='x', pady=5, padx=5)

        self.order_history_btn = ttk.Button(
            self.nav_frame, text="–ò—Å—Ç–æ—Ä–∏—è", style='Nav.TButton',
            command=self.show_order_history_section)
        self.order_history_btn.pack(fill='x', pady=5, padx=5)

        self.settings_btn = ttk.Button(
            self.nav_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", style='Nav.TButton',
            command=self.show_settings_section)
        self.settings_btn.pack(fill='x', pady=5, padx=5)
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = ttk.Frame(self.main_container)
        self.content_frame.pack(side='right', fill='both', expand=True, padx=5, pady=5)
    # –§—Ä–µ–π–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        self.menu_section = ttk.Frame(self.content_frame)
        self.settings_section = ttk.Frame(self.content_frame)
        self.connection_section = ttk.Frame(self.content_frame, style='Connection.TFrame')
        self.order_history_section = ttk.Frame(self.content_frame)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
        self.init_menu_section()
        self.init_settings_section()
        self.init_connection_section()
        self.init_order_history_section()

    def init_menu_section(self):
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.menu_canvas = tk.Canvas(self.menu_section, relief = 'sunken')
        self.menu_scrollbar = ttk.Scrollbar(self.menu_section, orient='vertical', command=self.menu_canvas.yview)
        self.menu_scrollable_frame = ttk.Frame(self.menu_canvas)

        self.menu_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.menu_canvas.configure(
                scrollregion=self.menu_canvas.bbox("all")
            )
        )
        self.menu_canvas.create_window((0, 0), window=self.menu_scrollable_frame, anchor="nw")
        self.menu_canvas.configure(yscrollcommand=self.menu_scrollbar.set)

        self.menu_canvas.pack(side="left", fill = "both",expand = True)
        self.menu_scrollbar.pack(side="right", fill = "y")
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_btn = ttk.Button(
            self.menu_canvas,
            text="+ –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ",
            command=self.add_dish)
        self.add_btn.pack(anchor="s",expand = True,fill = "x",side="bottom")

    def update_menu_display(self):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ—Ä–µ–π–º—ã
        for widget in self.menu_scrollable_frame.winfo_children():
            widget.destroy()
    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
        for i, dish in enumerate(self.dishes):
            DishFrame(
                self.menu_scrollable_frame,
                dish,
                self.save_data,
                self.delete_dish).grid(row=i, column=0, sticky='ew', pady=5, padx=5)

    def add_dish(self):
    # –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞
        add_window = tk.Toplevel(self.root)
        add_window.title("–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
        add_window.geometry("400x320")

        ttk.Label(add_window, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").pack(pady=(10, 0), padx=10, anchor='w')
        name_entry = ttk.Entry(add_window)
        name_entry.pack(fill='x', padx=10, pady=(0, 10))

        change_state = ttk.Label(add_window)
        change_state.pack(pady=(10, 0), padx=10, anchor='w')
        ttk.Label(change_state, text="–°—Ç–∞—Ç—É—Å:").pack(side='left')
        states = ["–í —Å—Ç–æ–ø –ª–∏—Å—Ç–µ", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"]
        combobox = ttk.Combobox(change_state, values=states, state="readonly")
        combobox.pack(side='left', padx=5)

        ttk.Label(add_window, text="–¶–µ–Ω–∞ (‚ÇΩ):").pack(pady=(10, 0), padx=10, anchor='w')
        price_entry = ttk.Entry(add_window)
        price_entry.pack(fill='x', padx=10, pady=(0, 10))

        ttk.Label(add_window, text="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:").pack(pady=(10, 0), padx=10, anchor='w')
        ingredients_text = tk.Text(add_window, height=5)
        ingredients_text.pack(fill='x', padx=10, pady=(0, 10))

        def save_new_dish():
            name = name_entry.get().strip()
            price = price_entry.get().strip()
            ingredients = ingredients_text.get('1.0', 'end-1c').strip()
            status = combobox.get().strip()

            if not name or not price or not ingredients or not status:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
                return

            try:
                price = float(price)
            except ValueError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
            new_dish = {
                'id': self.next_id,
                'name': name,
                'price': price,
                'ingredients': ingredients,
                'status': status}
            self.dishes.append(new_dish)
            self.next_id += 1
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.save_data()
            add_window.destroy()
            self.update_menu_display()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

        ttk.Button(add_window, text="–î–æ–±–∞–≤–∏—Ç—å", command=save_new_dish).pack(pady=10)

    def save_data(self):
        try:
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df = pd.DataFrame(self.dishes)
            df.to_excel(self.current_file, index=False)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    def delete_dish(self, dish_id):
    # –£–¥–∞–ª—è–µ–º –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        self.dishes = [dish for dish in self.dishes if dish['id'] != dish_id]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.save_data()
        self.update_menu_display()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ!")

    def init_settings_section(self):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ttk.Label(
            self.settings_section,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
            font=('Arial', 14, 'bold')
        ).pack(pady=20)
        menu_setting = ttk.LabelFrame(self.settings_section)
        menu_setting.pack(side='left', expand=True,anchor="n")
    # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        ttk.Label(menu_setting, text="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª –º–µ–Ω—é:").pack(pady=(10, 0))
        if self.current_file is None:
            self.file_label = ttk.Label(menu_setting, text= "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground='red')
        else:
            self.file_label = ttk.Label(menu_setting, text= self.current_file, foreground= 'green')
        self.file_label.pack(pady=(0, 20))
    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        ttk.Button(menu_setting, text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", command=self.sel_men_f).pack(pady=10)
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Button(menu_setting, text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", command=self.create_file_m).pack(pady=10)

        history_setting = ttk.LabelFrame(self.settings_section)
        history_setting.pack(side='left',expand=True, anchor="n")

        ttk.Label(history_setting, text="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤:").pack(pady=(10, 0))
        if self.current_history_file is None:
            self.file_h_label = ttk.Label(history_setting, text="–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground='red')
        else:
            self.file_h_label = ttk.Label(history_setting, text=self.current_history_file, foreground='green')
        self.file_h_label.pack(pady=(0, 20))
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        ttk.Button(history_setting, text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", command=self.sel_his_f).pack(pady=10)
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Button(history_setting, text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", command=self.create_file_h).pack(pady=10)

    def sel_men_f(self):
        self.select_file("menu")
    def sel_his_f(self):
        self.select_file("his")
    def create_file_m(self):
        self.create_new_file("menu")
    def create_file_h(self):
        self.create_new_file("his")

    def select_file(self, name):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")])
        if file_path:
            if name == "menu":
                self.current_file = file_path
                self.file_label.config(text=self.current_file, foreground= 'green')
                self.load_men_data()
            else:
                self.current_history_file = file_path
                self.file_h_label.config(text=self.current_history_file, foreground='green')
                self.load_order_history()

    def create_new_file(self, name):
        file_path = filedialog.asksaveasfilename(
            title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–µ–Ω—é",
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")])
        if file_path:
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
            wb = Workbook()
            ws = wb.active
            if name == "menu": ws.append(["id", "name", "price", "ingredients","status"])
            else: ws.append(["id", "time", "table", "items", "total", "status"])
            wb.save(file_path)
            if name == "menu":
                self.current_file = file_path
                self.file_label.config(text=self.current_file, foreground= 'green')
                self.dishes = []
                self.next_id = 1
                self.update_menu_display()
            else:
                self.current_history_file = file_path
                self.file_h_label.config(text=self.current_history_file, foreground='green')
                self.history = []
                self.nexth_id = 1
                #self.update_menu_display()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")

    def load_men_data(self):
        try:
            if os.path.exists(self.current_file):
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
                df = pd.read_excel(self.current_file)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
                if not {'id', 'name', 'price', 'ingredients','status'}.issubset(df.columns):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞")
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                self.dishes = df.to_dict('records')
                self.next_id = max(dish['id'] for dish in self.dishes) + 1 if self.dishes else 1
        except Exception as e:
            messagebox.showwarning("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {str(e)}. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
            self.current_file = None
            self.file_label.config(text = "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground='red')

        self.update_menu_display()

    def init_connection_section(self):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        ttk.Label(
            self.connection_section,
            text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º",
            font=('Arial', 14, 'bold')
        ).pack(pady=20)

        pos_frame = ttk.Frame(self.connection_section)
        pos_frame.pack(padx=10, pady=5)
    # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        server_frame = ttk.LabelFrame(pos_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        server_frame.pack(side='left', fill='x', padx=10, pady=5)

        ttk.Label(server_frame, text="IP —Å–µ—Ä–≤–µ—Ä–∞:").grid(row=0, column=0, padx=5, pady=5, sticky='e')
        ttk.Label(server_frame, text=f"{self.get_local_ip()}").grid(row=0, column=1, padx=5, pady=5, sticky='we')

        ttk.Label(server_frame, text="–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞:").grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.port_entry = ttk.Entry(server_frame)
        self.port_entry.insert(0, str(self.port))
        self.port_entry.grid(row=1, column=1, padx=5, pady=5, sticky='we')

        self.toggle_server_btn = ttk.Button(
            server_frame,
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
            command=self.toggle_server)
        self.toggle_server_btn.grid(row=2, column=0, columnspan=2, pady=5)

        self.server_status = ttk.Label(server_frame, text="–°–µ—Ä–≤–µ—Ä: –≤—ã–∫–ª—é—á–µ–Ω", foreground='red')
        self.server_status.grid(row=3, column=0, columnspan=2, pady=5)
    #–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫—É—Ö–Ω–µ
        pod_frame = ttk.LabelFrame(pos_frame, text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫—É—Ö–Ω–µ")
        pod_frame.pack(side='right', fill='x', padx=10, pady=5)

        host_frame = ttk.Frame(pod_frame)
        host_frame.pack(fill='x', padx=20, pady=5)
        ttk.Label(host_frame, text="IP –∫—É—Ö–Ω–∏:").pack(side='left')
        self.host_k_entry = ttk.Entry(host_frame)
        self.host_k_entry.insert(0, self.k_host)
        self.host_k_entry.pack(side='left', expand=True, fill='x', padx=5)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞
        port_frame = ttk.Frame(pod_frame)
        port_frame.pack(fill='x', padx=20, pady=5)
        ttk.Label(port_frame, text="–ü–æ—Ä—Ç –∫—É—Ö–Ω–∏:\n (–æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)").pack(side='left')
        self.port_k_entry = ttk.Entry(port_frame)
        self.port_k_entry.insert(0, str(self.k_port))
        self.port_k_entry.pack(side='left', expand=True, fill='x', padx=5)

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ttk.Button(
            pod_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self.save_settings
        ).pack(pady=1, padx=20, fill='x')

        self.connection_status = ttk.Label(
            pod_frame,
            text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
            foreground='red'
        )
        self.connection_status.pack(pady = 5)

    # –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π
        log_frame = ttk.LabelFrame(self.connection_section, text="–õ–æ–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)

        self.log_text = tk.Text(log_frame, height=10, state='disabled')
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)

        scrollbar = ttk.Scrollbar(log_frame, command=self.log_text.yview)
        scrollbar.pack(side='right', fill='y')
        self.log_text['yscrollcommand'] = scrollbar.set

    def get_local_ip(self):
    # –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    def save_settings(self):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            self.k_host = self.host_k_entry.get()
            self.k_port = int(self.port_k_entry.get())
            self.connection_status.config(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", foreground='green')
        except ValueError:
            self.connection_status.config(text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç", foreground='red')
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    def toggle_server(self):
        if self.listening:
            self.stop_server()
        else:
            self.start_server()

    def start_server(self):
        try:
            self.port = int(self.port_entry.get())

            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(1)

            self.listening = True
            self.toggle_server_btn.config(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            self.server_status.config(text="–°–µ—Ä–≤–µ—Ä: —Ä–∞–±–æ—Ç–∞–µ—Ç", foreground='green')
            self.log_message(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            server_thread = threading.Thread(target=self.listen_for_connections, daemon=True)
            server_thread.start()

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {str(e)}")

    def stop_server(self):
        try:
            self.listening = False
            if self.server_socket:
                self.server_socket.close()
            if self.client_socket:
                self.client_socket.close()

            self.toggle_server_btn.config(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            self.server_status.config(text="–°–µ—Ä–≤–µ—Ä: –≤—ã–∫–ª—é—á–µ–Ω", foreground='red')
            self.log_message("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

    def listen_for_connections(self):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        while self.listening:
            try:
                self.client_socket, addr = self.server_socket.accept()
                self.log_message(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å {addr}")

                data = self.client_socket.recv(2048).decode()
                if data == "REQUEST_MENU_DATA":
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
                    self.send_menu(self.client_socket)
                    self.log_message("–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É")

                elif data == "REQUEST_HISTORY_DATA":
                    self.send_history(self.client_socket)
                    self.log_message("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É")

                elif data == "SEND_ORDER_EXCEL":
                    self.client_socket.send(b"READY")
                    order = self.receive_order(self.client_socket)
                    self.log_message("–ü–æ–ª—É—á–∏–ª–∏ –∑–∞–∫–∞–∑")
                    self.save_in_history(order)

                self.client_socket.close()

            except Exception as e:
                if self.listening:
                    self.log_message(f"–û—à–∏–±–∫–∞: {str(e)}")

    def send_menu(self, client_socket):
        try:
            file_size = len(json.dumps(self.dishes).encode('utf-8'))
            client_socket.sendall(str(file_size).encode())
    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            ack = client_socket.recv(1024).decode()
            print(ack)
            if ack != "READY":
                raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ñ–∞–π–ª–∞")
            client_socket.send(json.dumps(self.dishes).encode('utf-8'))

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise

    def send_history(self, client_socket):
        try:
            history = self.sort_order()
            file_size = len(json.dumps(history).encode('utf-8'))
            client_socket.sendall(str(file_size).encode())
    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            ack = client_socket.recv(1024).decode()
            if ack != "READY":
                raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ñ–∞–π–ª–∞")
            client_socket.send(json.dumps(history).encode('utf-8'))

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise

    def send_order(self):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.k_host, self.k_port))
                s.sendall(b"SEND_ORDER_DATA")
                response = s.recv(1024).decode()
                if response != "READY": raise Exception("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                history = self.sort_order()
                file_size = len(json.dumps(history).encode('utf-8'))
                s.sendall(str(file_size).encode())
    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                ack = s.recv(1024).decode()
                if ack != "READY": raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Ñ–∞–π–ª–∞")
                s.send(json.dumps(history).encode('utf-8'))
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    def sort_order(self):
        history = []
        df = pd.read_excel(self.current_history_file)
        dg = df[df['status'] == '–ì–æ—Ç–æ–≤–∏—Ç—Å—è']
        for item in dg.to_dict('records'):
            item['items'] = json.loads(item['items'])
            history.append(item)
        return history

    def receive_order(self, client_socket):
        file_size = int(client_socket.recv(1024).decode())
        self.log_message("–ü–æ–ª—É—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä")
        client_socket.send(b"READY")
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        received_data = b''
        while len(received_data) < file_size:
            chunk = client_socket.recv(4096)
            if not chunk:
                break
            received_data += chunk
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
        return json.loads(received_data)

    def log_message(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.config(state='normal')
        self.log_text.insert('end', f"[{timestamp}] {message}\n")
        self.log_text.config(state='disabled')
        self.log_text.see('end')

    def init_order_history_section(self):
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        history_frame = ttk.LabelFrame(self.order_history_section)
        history_frame.pack(fill='both',expand=True, padx=10, pady=5)
    # –î–µ–ª–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        self.orders_tree = ttk.Treeview(
            history_frame,
            columns=('id', 'time', 'table', 'dishes', 'total', 'status'),
            show='headings')
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.orders_tree.heading('id', text='ID')
        self.orders_tree.column('id', width=20, minwidth=20)
        self.orders_tree.heading('time', text='–í—Ä–µ–º—è')
        self.orders_tree.column('time', width=100, minwidth=100)
        self.orders_tree.heading('table', text='–°—Ç–æ–ª–∏–∫')
        self.orders_tree.column('table', width=60, minwidth=60)
        self.orders_tree.heading('dishes', text='–ë–ª—é–¥–∞')
        self.orders_tree.heading('total', text='–°—É–º–º–∞')
        self.orders_tree.column('total', width=60, minwidth=60)
        self.orders_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        self.orders_tree.column('status', width=100, minwidth=100)

        self.orders_tree.pack(fill='both', expand=True, padx=5, pady=5)
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(
            history_frame,
            text="–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            command=self.update_orders_display).pack(pady=5, fill='x')

    def update_orders_display(self):
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        history = self.load_order_history()
        for order in reversed(history):
            dishes_text = ", ".join([f"{item['name']} x{item['quantity']}" for item in order['items']])
            self.orders_tree.insert('', 'end', values=(
                order['id'],
                order['time'],
                order['table'],
                dishes_text,
                f"{order['total']} ‚ÇΩ",
                order['status']))

    def load_order_history(self):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Excel
        if os.path.exists(self.current_history_file):
            try:
                df = pd.read_excel(self.current_history_file)
                if not {'time', 'table', 'items', 'total','status', 'id'}.issubset(df.columns):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞")
                history = []
                self.nexth_id = 0
                for item in df.to_dict('records'):
                    item['items'] = json.loads(item['items'])
                    self.nexth_id = max(self.nexth_id,item['id'])
                    history.append(item)
                self.nexth_id += 1
                return history

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
                self.current_history_file = None
                self.file_h_label.config(text="–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", foreground='red')
        return []

    def save_in_history(self,order):
        try:
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            df = pd.read_excel(self.current_history_file)
            history = df.to_dict('records')
            if order['status'] == '–ì–æ—Ç–æ–≤–∏—Ç—Å—è':
                order['id'] = self.nexth_id
                history.append(order)
                df = pd.DataFrame(history)
                self.nexth_id += 1
            else:
                id = order['id']
                df = pd.DataFrame(history)
                df.loc[df['id'] == id, 'status'] = '–í—ã–¥–∞–Ω'

            df.to_excel(self.current_history_file, index=False)
            if self.k_host: self.send_order()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}")

    def show_connection_section(self):
        self.show_section("con")
    def show_order_history_section(self):
        self.show_section("ord")
    def show_menu_section(self):
        self.show_section("men")
    def show_settings_section(self):
        self.show_section("set")
    def show_section(self,name):
        if name == "beg": self.settings_section.pack(fill='both', expand=True)
        elif (self.current_file is None) or (self.current_history_file is None):
            messagebox.showerror("–í–Ω–∏–º–∞–Ω–∏–µ", "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
        else:
            if name == "men":
                self.menu_section.pack(fill='both', expand=True)
                self.update_menu_display()
            else: self.menu_section.pack_forget()
            if name == "con": self.connection_section.pack(fill='both', expand=True)
            else: self.connection_section.pack_forget()
            if name == "ord": self.order_history_section.pack(fill='both', expand=True)
            else: self.order_history_section.pack_forget()
            if name == "set": self.settings_section.pack(fill='both', expand=True)
            else: self.settings_section.pack_forget()

if __name__ == "__main__":
    root = tk.Tk()
    app = Server(root)
    root.mainloop()
