import tkinter as tk
from tkinter import ttk, messagebox
import socket
import threading
import json


class DishOrderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ö—É—Ö–Ω—è")
        self.root.geometry("1000x700")  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.host = '0.0.0.0'
        self.port = 5051
        self.server_socket = None
        self.client_socket = None
        self.listening = False
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
        self.order_history = []
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        self.show_settings_section()

        self.style = ttk.Style()
        self.style.configure('Order.TFrame', background='white')

    def create_widgets(self):
    # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ttk.Frame(self.root)
        self.main_container.pack(fill='both', expand=True)
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = ttk.Frame(self.main_container)
        self.content_frame.pack(fill='both', expand=True)
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
        self.init_order_section()
        self.init_settings_section()
    # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_frame = ttk.Frame(self.main_container, height=40)
        self.nav_frame.pack(fill='x', side='bottom')
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.order_btn = ttk.Button(
            self.nav_frame,
            text="üõí–ó–∞–∫–∞–∑—ã",
            style='Nav.TButton',
            command=self.show_order_section)
        self.order_btn.pack(side='left', expand=True, fill='x')

        self.settings_btn = ttk.Button(
            self.nav_frame,
            text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            style='Nav.TButton',
            command=self.show_settings_section)
        self.settings_btn.pack(side='left', expand=True, fill='x')

    def init_order_section(self):
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.order_section = ttk.Frame(self.content_frame)
        self.history_canvas = tk.Canvas(self.order_section)
        self.history_scrollbar = ttk.Scrollbar(self.order_section, orient='vertical',
                                               command=self.history_canvas.yview)
        self.history_scrollable_frame = ttk.Frame(self.history_canvas)

        self.history_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.history_canvas.configure(
                scrollregion=self.history_canvas.bbox("all")
            )
        )

        self.history_canvas.create_window((0, 0), window=self.history_scrollable_frame, anchor="nw")
        self.history_canvas.configure(yscrollcommand=self.history_scrollbar.set)

        self.history_canvas.pack(side="left", fill="both", expand=True)
        self.history_scrollbar.pack(side="right", fill="y")

    def create_order_frame(self, order,n):
        order_frame = ttk.Frame(self.history_scrollable_frame, style='Order.TFrame', relief='raised')
        order_frame.grid(row=n%3, column=n//3, sticky='nsew', pady=5, padx=5)
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ–ª–∏–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        header_frame = ttk.Frame(order_frame, style='Order.TFrame')
        header_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(header_frame, text=f"–°—Ç–æ–ª–∏–∫ ‚Ññ{order['table']}",
            font=('Arial', 15, 'bold'), background='white'
        ).pack(side='left')

        ttk.Label(header_frame, text=order['time'],
            font=('Arial', 12), background='white'
        ).pack(side='right')
    # –°–ø–∏—Å–æ–∫ –±–ª—é–¥
        dishes_frame = ttk.Frame(order_frame, style='Order.TFrame')
        dishes_frame.pack(fill='x', padx=10, pady=2)

        for item in order['items']:
            dish_frame = ttk.Frame(dishes_frame, style='Order.TFrame')
            dish_frame.pack(fill='x', pady=2)

            ttk.Label(dish_frame, text=f"{item['name']} x {item['quantity']}",
                font=('Arial', 25), background='white'
            ).pack(side='left')

    def update_history_display(self):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ—Ä–µ–π–º—ã
        for widget in self.history_scrollable_frame.winfo_children():
            widget.destroy()
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
        for i, order in enumerate(self.order_history):
            self.create_order_frame(order, i)

    def init_settings_section(self):
        self.connection_section = ttk.Frame(self.content_frame,)
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        ttk.Label(
            self.connection_section,
            text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º",
            font=('Arial', 14, 'bold')
        ).pack(pady=20)
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
        server_frame = ttk.LabelFrame(self.connection_section, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        server_frame.pack(fill='x', padx=10, pady=5)

        ttk.Label(server_frame, text="IP –∫—É—Ö–Ω–∏:").grid(row=0, column=0, padx=5, pady=5, sticky='e')
        ttk.Label(server_frame, text=f"{self.get_local_ip()}").grid(row=0, column=1, padx=5, pady=5, sticky='we')

        ttk.Label(server_frame, text="–ü–æ—Ä—Ç –∫—É—Ö–Ω–∏:\n (–æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)").grid(row=1, column=0, padx=5, pady=5, sticky='e')
        self.port_entry = ttk.Entry(server_frame)
        self.port_entry.insert(0, str(self.port))
        self.port_entry.grid(row=1, column=1, padx=5, pady=5, sticky='we')

        self.server_status = ttk.Label(server_frame, text="–ö—É—Ö–Ω—è: –≤—ã–∫–ª—é—á–µ–Ω–∞", foreground='red')
        self.server_status.grid(row=2, column=0, columnspan=2, pady=5)

        self.toggle_server_btn = ttk.Button(
            server_frame,
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫—É—Ö–Ω—é",
            command=self.toggle_server)
        self.toggle_server_btn.grid(row=3, column=0, columnspan=2, pady=5)

    def toggle_server(self):
        if self.listening:
            self.stop_server()
        else:
            self.start_server()
    def get_local_ip(self):
    # –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    def start_server(self):
        try:
            self.port = int(self.port_entry.get())

            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.bind((self.host, self.port))
            self.server_socket.listen(1)

            self.listening = True
            self.toggle_server_btn.config(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ö–Ω—é")
            self.server_status.config(text="–ö—É—Ö–Ω—è: —Ä–∞–±–æ—Ç–∞–µ—Ç", foreground='green')
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            server_thread = threading.Thread(target=self.listen_for_connections, daemon=True)
            server_thread.start()

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: {str(e)}")

    def stop_server(self):
        try:
            self.listening = False
            if self.server_socket:
                self.server_socket.close()
            if self.client_socket:
                self.client_socket.close()

            self.toggle_server_btn.config(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            self.server_status.config(text="–°–µ—Ä–≤–µ—Ä: –≤—ã–∫–ª—é—á–µ–Ω", foreground='red')

        except Exception as e:
            messagebox.showwarning("–û—à–∏–±–∫–∞", f"{str(e)}")

    def listen_for_connections(self):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        while self.listening:
            try:
                self.client_socket, addr = self.server_socket.accept()

                data = self.client_socket.recv(2048).decode()
                if data == "SEND_ORDER_DATA":
    #–ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
                    self.client_socket.send(b"READY")
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = int(self.client_socket.recv(1024).decode())
                    self.client_socket.sendall(b"READY")
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                    received_data = b''
                    while len(received_data) < file_size:
                        chunk = self.client_socket.recv(4096)
                        if not chunk:
                            break
                        received_data += chunk
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                    self.order_history = json.loads(received_data)
                    self.update_history_display()

                self.client_socket.close()
            except Exception as e:
                messagebox.showwarning("–û—à–∏–±–∫–∞", f"{str(e)}")

    def receive_order(self):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = int(s.recv(1024).decode())
                s.sendall(b"READY")
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                received_data = b''
                while len(received_data) < file_size:
                    chunk = s.recv(4096)
                    if not chunk:
                        break
                    received_data += chunk
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                self.order_history = json.loads(received_data)

        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def show_order_section(self):
        self.connection_section.pack_forget()
        self.order_section.pack(fill='both', expand=True)
        self.update_nav_buttons('order')

    def show_settings_section(self):
        self.order_section.pack_forget()
        self.connection_section.pack(fill='both', expand=True)
        self.update_nav_buttons('settings')

    def update_nav_buttons(self, active_section):
        self.order_btn.state(['!pressed'])
        self.settings_btn.state(['!pressed'])
        if active_section == 'order':
            self.order_btn.state(['pressed'])
        elif active_section == 'settings':
            self.settings_btn.state(['pressed'])

if __name__ == "__main__":
    root = tk.Tk()
    app = DishOrderApp(root)
    root.mainloop()
