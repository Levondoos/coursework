import tkinter as tk
from tkinter import ttk, messagebox
import socket
from datetime import datetime
import json
import time


class DishOrderApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ó–∞–∫–∞–∑ –±–ª—é–¥")
        self.root.geometry("400x700")  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.host = ''
        self.port = 5050
    # –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é –∏ –∑–∞–∫–∞–∑–∞
        self.menu_data = None
        self.order = {}
        self.current_table = 1
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤
        self.order_history = []
    # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.configure('Dish.TFrame', font=('Arial', 14), background='white', borderwidth=2)
        self.style.configure('Cancel_Dish.TFrame', background='#B5B5B5', borderwidth=2, relief='raised')
        self.style.configure('Order.TFrame', background='#f5f5f5', borderwidth=1, relief='sunken')
        self.style.configure('Nav.TButton', font=('Arial', 10), padding=5)
        self.style.configure('Settings.TFrame', background='#f0f0f0')
        self.style.configure('History.TFrame',background='white')
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.show_settings_section()

    def create_widgets(self):
    # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = ttk.Frame(self.root)
        self.main_container.pack(fill='both', expand=True)
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content_frame = ttk.Frame(self.main_container)
        self.content_frame.pack(fill='both', expand=True)
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã
        self.init_menu_section()
        self.init_order_section()
        self.init_settings_section()
    # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_frame = ttk.Frame(self.main_container, height=40)
        self.nav_frame.pack(fill='x', side='bottom')
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.menu_btn = ttk.Button(
            self.nav_frame,
            text="üçΩÔ∏è–ú–µ–Ω—é",
            style='Nav.TButton',
            command=self.show_menu_section)
        self.menu_btn.pack(side='left', expand=True, fill='x')

        self.order_btn = ttk.Button(
            self.nav_frame,
            text="üõí–ó–∞–∫–∞–∑",
            style='Nav.TButton',
            command=self.show_order_section)
        self.order_btn.pack(side='left', expand=True, fill='x')

        self.settings_btn = ttk.Button(
            self.nav_frame,
            text="‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            style='Nav.TButton',
            command=self.show_settings_section)
        self.settings_btn.pack(side='left', expand=True, fill='x')

    def init_menu_section(self):
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª —Å –º–µ–Ω—é
        self.menu_section = ttk.Frame(self.content_frame)

    # –•–æ–ª—Å—Ç –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        self.menu_canvas = tk.Canvas(self.menu_section)
        self.menu_scrollbar = ttk.Scrollbar(self.menu_section, orient='vertical', command=self.menu_canvas.yview)
        self.menu_scrollable_frame = ttk.Frame(self.menu_canvas)

        self.menu_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.menu_canvas.configure(
                scrollregion=self.menu_canvas.bbox("all")
            )
        )
        self.menu_canvas.create_window((0, 0), window=self.menu_scrollable_frame, anchor="nw")
        self.menu_canvas.configure(yscrollcommand=self.menu_scrollbar.set)

        self.menu_canvas.pack(side='left', fill='both', expand=True)
        self.menu_scrollbar.pack(side='right', fill='y')

    def create_dish_card(self, dish):
    #–°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞
        card = ttk.Frame(self.menu_scrollable_frame, style='Dish.TFrame')
        card.pack(fill='x', pady=5, padx=10,expand = True)

        if dish['status'] != "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω": bac = '#B5B5B5'
        else: bac ='white'

        card.configure(padding=10, relief='raised', borderwidth=2)
        card.grid_columnconfigure(1, weight=1)

        name_label = ttk.Label(card, text=dish['name'], font=('Arial', 14, 'bold'), background=bac, wraplength=130)
        name_label.grid(row=0, column=0, sticky='w', pady=(0, 5))

        price_label = ttk.Label(card, text=f"{dish['price']} ‚ÇΩ", font=('Arial', 14),background=bac)
        price_label.grid(row=0, column=1, sticky='e', pady=(0, 5))

        ingredients_label = ttk.Label(card, text=f'–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{dish['ingredients']}',background=bac, wraplength=200)
        ingredients_label.grid(row=1, column=0, columnspan=2, sticky='w')
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º
        order_frame = ttk.Frame(card, style='Dish.TFrame')
        order_frame.grid(row=2, column=0, columnspan=2, pady=(10, 0), sticky='e')
        if dish['status'] == "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω":
            ttk.Label(order_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", background=bac).pack(side='left')

            quantity = tk.IntVar(value=0)
            quantity_spin = ttk.Spinbox(order_frame, from_=0, to=10, textvariable=quantity, width=3)
            quantity_spin.pack(side='left', padx=5)

            add_button = ttk.Button( order_frame,text="–î–æ–±–∞–≤–∏—Ç—å",
                command=lambda: self.add_to_order(dish['name'], dish['price'], quantity.get()))
            add_button.pack(side='right')
        else:
            ttk.Label(order_frame, text= "–í —Å—Ç–æ–ø –ª–∏—Å—Ç–µ", font=('Arial', 14),background=bac).pack(side='left')
            card.config(style='Cancel_Dish.TFrame')

    def add_to_order(self, dish_name, price, quantity):
        if dish_name in self.order:
            if quantity == 0:
                del self.order[dish_name]
            else:
                self.order[dish_name]['quantity'] = quantity
        elif quantity != 0:
            self.order[dish_name] = {
                'price': price,
                'quantity': quantity
            }

    def init_order_section(self):
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
        self.order_section = ttk.Frame(self.content_frame)
    # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.order_notebook = ttk.Notebook(self.order_section)
        self.order_notebook.pack(fill='both', expand=True)
    # –í–∫–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        self.current_order_tab = ttk.Frame(self.order_notebook)
        self.order_notebook.add(self.current_order_tab, text="–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑")
    # –í–∫–ª–∞–¥–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        self.history_tab = ttk.Frame(self.order_notebook, style='History.TFrame')
        self.order_notebook.add(self.history_tab, text="–ò—Å—Ç–æ—Ä–∏—è")
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        self.init_tab_current_order()
    # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        self.init_tab_history()

    def init_tab_current_order(self):
    # –í—ã–±–æ—Ä —Å—Ç–æ–ª–∏–∫–∞
        table_frame = ttk.Frame(self.current_order_tab)
        table_frame.pack(fill='x', padx=10, pady=5)
        ttk.Label(table_frame, text="–°—Ç–æ–ª–∏–∫:").pack(side='left')
        self.table_var = tk.IntVar(value=self.current_table)
        self.table_spin = ttk.Spinbox(
            table_frame,
            from_=1,
            to=20,
            textvariable=self.table_var,
            width=3,
            command=self.update_table
        )
        self.table_spin.pack(side='left', padx=5)
    # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥
        self.order_listbox = tk.Listbox(
            self.current_order_tab,
            height=8,
            font=('Arial', 11),
            selectbackground='#e0e0e0'
        )
        self.order_listbox.pack(fill='both', expand=True, padx=10, pady=5)
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        self.total_label = ttk.Label(
            self.current_order_tab,
            text="–ò—Ç–æ–≥–æ: 0 ‚ÇΩ",
            font=('Arial', 12, 'bold')
        )
        self.total_label.pack(pady=5)
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(self.current_order_tab)
        btn_frame.pack(fill='x', padx=10, pady=5)

        ttk.Button(
            btn_frame,
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            command=self.place_order
        ).pack(side='left', expand=True, fill='x', padx=2)

        ttk.Button(
            btn_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å",
            command=self.clear_order
        ).pack(side='left', expand=True, fill='x', padx=2)

    def update_table(self):
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞
        self.current_table = self.table_var.get()

    def place_order(self):
    # –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑
        if not self.order:
            messagebox.showwarning("–ü—É—Å—Ç–æ", "–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç")
            return
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        order_items = []
        total = 0

        for name, details in self.order.items():
            item_total = details['price'] * details['quantity']
            total += item_total
            order_items.append({
                "name": name,
                "price": details['price'],
                "quantity": details['quantity']
            })
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∏—Å—Ç–æ—Ä–∏—é
        new_order = {
            'time': datetime.now().strftime("%d.%m.%Y %H:%M"),
            'table': self.current_table,
            'items': json.dumps(order_items),
            'total': total,
            'status': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è'
        }
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ç–æ–ª–∏–∫–∞ ‚Ññ{self.current_table} –Ω–∞ —Å—É–º–º—É {total} ‚ÇΩ?")
        if confirmation:
            self.send_order(new_order)
            self.clear_order()
            self.update_menu()
            self.show_menu_section()
            self.update_history_display()

    def update_order_display(self):
        self.order_listbox.delete(0, tk.END)
        total = 0

        for dish_name, details in self.order.items():
            dish_total = details['price'] * details['quantity']
            total += dish_total
            self.order_listbox.insert(
                tk.END,
                f"{dish_name} x{details['quantity']} - {dish_total} ‚ÇΩ"
            )
        self.total_label.config(text=f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ")

    def clear_order(self):
        self.order = {}
        self.update_order_display()

    def init_tab_history(self):
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.history_canvas = tk.Canvas(self.history_tab)
        self.history_scrollbar = ttk.Scrollbar(self.history_tab, orient='vertical',
                                               command=self.history_canvas.yview)
        self.history_scrollable_frame = ttk.Frame(self.history_canvas)

        self.history_scrollable_frame.bind(
            "<Configure>",
            lambda e: self.history_canvas.configure(
                scrollregion=self.history_canvas.bbox("all")
            )
        )

        self.history_canvas.create_window((0, 0), window=self.history_scrollable_frame, anchor="nw")
        self.history_canvas.configure(yscrollcommand=self.history_scrollbar.set)

        self.history_canvas.pack(side="left", fill="both", expand=True)
        self.history_scrollbar.pack(side="right", fill="y")
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        ttk.Button(
            self.history_tab,
            text="–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
            command=self.update_history_display
        ).pack(side='bottom', pady=5, fill='x')

    def create_order_frame(self, order):
    #–°–æ–∑–¥–∞–µ—Ç —Ñ—Ä–µ–π–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        order_frame = ttk.Frame(self.history_scrollable_frame, style= 'History.TFrame', relief='raised')
        order_frame.pack(fill='x', pady=5, padx=5)
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç–æ–ª–∏–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        header_frame = ttk.Frame(order_frame, style= 'History.TFrame')
        header_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(header_frame,text=f"–°—Ç–æ–ª–∏–∫ ‚Ññ{order['table']}",font=('Arial', 12, 'bold'),background='white'
        ).pack(side='left')

        ttk.Label(header_frame,text=order['time'],font=('Arial', 10),background='white'
        ).pack(side='right')
    # –°–ø–∏—Å–æ–∫ –±–ª—é–¥
        dishes_frame = ttk.Frame(order_frame, style= 'History.TFrame')
        dishes_frame.pack(fill='x', padx=10, pady=5)

        for item in order['items']:
            dish_frame = ttk.Frame(dishes_frame, style= 'History.TFrame')
            dish_frame.pack(fill='x', pady=2)

            ttk.Label(dish_frame,
                text=f"{item['name']} x {item['quantity']}",
                font=('Arial', 10),background='white'
            ).pack(side='left')

            ttk.Label(dish_frame,
                text=f"{item['price'] * item['quantity']} ‚ÇΩ",
                font=('Arial', 10),background='white'
            ).pack(side='right')
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∏ –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        footer_frame = ttk.Frame(order_frame, style= 'History.TFrame')
        footer_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(footer_frame,
            text=f"–ò—Ç–æ–≥–æ: {order['total']} ‚ÇΩ",
            font=('Arial', 11, 'bold'),background='white'
        ).pack(side='left')

        ttk.Button(footer_frame, text="–ü–æ–¥–∞—Ç—å",
            command=lambda oid=order['id']: self.change_order_status(oid),
            style='Nav.TButton'
        ).pack(side='right')

    def update_history_display(self):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ—Ä–µ–π–º—ã
        for widget in self.history_scrollable_frame.winfo_children():
            widget.destroy()
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ì–æ—Ç–æ–≤–∏—Ç—Å—è"
        self.receive_history()
        for order in reversed(self.order_history):
            self.create_order_frame(order)

    def change_order_status(self, order_id):
    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ '–ü–æ–¥–∞–Ω–æ'
        for order in self.order_history:
            if order['id'] == order_id:
                order['status'] = '–ü–æ–¥–∞–Ω–æ'
                self.send_order(order)
                break
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        time.sleep(0.2)
        self.update_history_display()

    def init_settings_section(self):
        self.settings_section = ttk.Frame(self.content_frame, style='Settings.TFrame')
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            self.settings_section,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            font=('Arial', 14, 'bold')
        ).pack(pady=10)
    # –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        ttk.Label(
            self.settings_section,
            text=f"–í–∞—à IP: {self.get_local_ip()}",
            font=('Arial', 10)
        ).pack(pady=5)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∞
        host_frame = ttk.Frame(self.settings_section)
        host_frame.pack(fill='x', padx=20, pady=5)
        ttk.Label(host_frame, text="IP —Å–µ—Ä–≤–µ—Ä–∞:").pack(side='left')
        self.host_entry = ttk.Entry(host_frame)
        self.host_entry.insert(0, self.host)
        self.host_entry.pack(side='left', expand=True, fill='x', padx=5)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä—Ç–∞
        port_frame = ttk.Frame(self.settings_section)
        port_frame.pack(fill='x', padx=20, pady=5)
        ttk.Label(port_frame, text="–ü–æ—Ä—Ç:").pack(side='left')
        self.port_entry = ttk.Entry(port_frame)
        self.port_entry.insert(0, str(self.port))
        self.port_entry.pack(side='left', expand=True, fill='x', padx=5)
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ttk.Button(
            self.settings_section,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            command=self.save_settings
        ).pack(pady=10, padx=20, fill='x')
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
        ttk.Button(
            self.settings_section,
            text="–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é",
            command=self.load_menu
        ).pack(pady=5, padx=20, fill='x')
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = ttk.Label(
            self.settings_section,
            text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
            foreground='red'
        )
        self.connection_status.pack(pady=10)

    def get_local_ip(self):
    # –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–µ—Ç–∏
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip = s.getsockname()[0]
            s.close()
            return ip
        except:
            messagebox.showerror("–û—à–∏–±–∫–∞", "Xnj_nj")

    def load_menu(self):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
        try:
            self.menu_data = self.receive_menu()
            if self.menu_data:
                self.update_menu()
                self.connection_status.config(text="–ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ", foreground='green')
        except Exception as e:
            self.connection_status.config(text="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", foreground='red')
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é: {str(e)}")

    def update_menu(self):
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        for widget in self.menu_scrollable_frame.winfo_children():
            widget.destroy()
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥
        for i, dish in enumerate(self.menu_data):
            self.create_dish_card(dish)

    def receive_menu(self):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.host, self.port))
                s.sendall(b"REQUEST_MENU_DATA")
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = int(s.recv(1024).decode())
                s.sendall(b"READY")
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                received_data = b''
                while len(received_data) < file_size:
                    chunk = s.recv(4096)
                    if not chunk:
                        break
                    received_data += chunk
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                return json.loads(received_data)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def send_order(self, order):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.host, self.port))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
                s.sendall(b"SEND_ORDER_EXCEL")
    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                response = s.recv(1024).decode()
                if response != "READY": raise Exception("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = len(json.dumps(order).encode('utf-8'))
                s.sendall(str(file_size).encode())
                response = s.recv(1024).decode()
                if response != "READY": raise Exception("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º —Ñ–∞–π–ª
                s.send(json.dumps(order).encode('utf-8'))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            return False

    def receive_history(self):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.host, self.port))
                s.sendall(b"REQUEST_HISTORY_DATA")
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = int(s.recv(1024).decode())
                s.sendall(b"READY")
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                received_data = b''
                while len(received_data) < file_size:
                    chunk = s.recv(4096)
                    if not chunk:
                        break
                    received_data += chunk
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
                self.order_history =json.loads(received_data)
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def show_menu_section(self):
        self.order_section.pack_forget()
        self.settings_section.pack_forget()
        self.menu_section.pack(fill='both', expand=True)
        self.update_nav_buttons('menu')

    def show_order_section(self):
        if self.menu_data is None:
            messagebox.showerror("–í–Ω–∏–º–∞–Ω–∏–µ", "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É.")
        else:
            self.menu_section.pack_forget()
            self.settings_section.pack_forget()
            self.order_section.pack(fill='both', expand=True)
            self.update_order_display()
            self.update_history_display()
            self.update_nav_buttons('order')

    def show_settings_section(self):
        self.menu_section.pack_forget()
        self.order_section.pack_forget()
        self.settings_section.pack(fill='both', expand=True)
        self.update_nav_buttons('settings')

    def update_nav_buttons(self, active_section):
        self.menu_btn.state(['!pressed'])
        self.order_btn.state(['!pressed'])
        self.settings_btn.state(['!pressed'])

        if active_section == 'menu':
            self.menu_btn.state(['pressed'])
        elif active_section == 'order':
            self.order_btn.state(['pressed'])
        elif active_section == 'settings':
            self.settings_btn.state(['pressed'])

    def save_settings(self):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            self.host = self.host_entry.get()
            self.port = int(self.port_entry.get())
            self.connection_status.config(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", foreground='green')
            self.load_menu()
        except ValueError:
            self.connection_status.config(text="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç", foreground='red')
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

if __name__ == "__main__":
    root = tk.Tk()
    app = DishOrderApp(root)
    root.mainloop()